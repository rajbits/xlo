<!DOCTYPE html>
<html>
	<head>
		<title>Fixed header test</title>
		<link rel="stylesheet" href="../src/assets/lib/bootstrap/css/bootstrap.min.css" />
		<style>
			th
			{
				background-color: #f0f0f0;
			}
		</style>
	</head>
	<body>
		<p>&nbsp;</p>
		<p>&nbsp;</p>
		<p>&nbsp;</p>
		<div id='main'>
			<table class='table table-striped table-bordered' cellspacing='0' cellpadding='3'></table>
		</div>
		
		<script src='../src/assets/lib/jquery/jquery-2.0.3.min.js'></script>
		<script src='../src/assets/js/duplex.deps-0.6.js'></script>
		<script src='../src/assets/js/duplex-0.61.js'></script>
		<script>
			$.fn.freeze = function(opts)
			{
				return this.each(function()
				{
					
				});
			};
		</script>
		<script>
			var $main = $('#main'), $tbl = $main.find('>table').css({position: 'relative', zIndex: 50}), rows = 100, cols = 10;
			function load_data()
			{
				var $thead = $('<thead/>').appendTo($tbl);
				load_header($thead);
				
				var $tbody = $('<tbody/>').appendTo($tbl);
				for(var i = 0; i < rows; i++)
				{
					var $tr = $('<tr/>').appendTo($tbody);
					for(var j = 0; j < cols; j++)
					{
						var $td = $('<td/>').appendTo($tr).html(j + Math.random());
					}	
				}				
			}
			
			function load_header($thead)
			{				
				var $tr = $('<tr/>').appendTo($thead);
				for(var i = 0; i < cols; i++)
				{			
					var $th = $('<th/>').appendTo($tr).html(i + Math.random());		
				}
			}
			
			function backup_widths($thead)
			{
				$thead.find('>tr>th').each(function(i, th)
				{
					var $th = $(th);
					$th.data('width', $th.get(0).style.width);
				});
			}
			
			function restore_widths($thead)
			{
				$thead.find('>tr>th').each(function(i, th)
				{
					var $th = $(th), w = $th.data('width');
					if (w == undefined) w = "";
					
					$th.css({ width: w , 'min-width': "" });
				});
			}
			
			function add_listeners()
			{
				var pos = $tbl.offset(), scrolling = false, $thead = $tbl.find('>thead').css({'border-bottom': 0}), $tbody = $tbl.find('>tbody'), timeout;
				var $coltbl;
				
				$(window).on('scroll', function(e)
				{
					if (!scrolling)
					{
						backup_widths($thead);
						scrolling = true;	
					}
					
					var $win = $(this), st = $win.scrollTop(), sl = $win.scrollLeft();
					if (st - pos.top > 0)
					{
						$thead.find('>tr>th').each(function(i, th)
						{
							var w = $tbody.find('>tr:eq(0) >td:nth-child(' + (i+1) + ')').outerWidth();
							$(th).css({'min-width': w, width: w});	
						});
						$thead.css({position: 'absolute', top: st - pos.top, left: 0});						
					}
					else
					{
						$thead.css({position: 'inherit', top: "", width: ""});
						restore_widths($thead);
					}
							
					//Column freeze
					if (sl - pos.left > 0)
					{												
						if ($coltbl == undefined)
						{
							$coltbl = $('<table/>').addClass('table table-striped table-bordered')
									.appendTo($tbl.parent().css({position: 'relative'}))
									.css({position: 'absolute', display: 'inline-block', zIndex: 100, backgroundColor: '#fff', width: 'auto'});
						}
						
						if (!$coltbl.data('loaded'))
						{
							$coltbl.append('<thead/>').append('<tbody/>');
							$thead.find('>tr >:nth-child(1)').each(function(i, td)
							{
								var $tr = $('<tr/>').append(td);
								$coltbl.find('>thead').css({position: 'relative'}).append($tr);
							});
							
							$tbody.find('>tr >:nth-child(1)').each(function(i, td)
							{
								var $td = $(td);
								$td.css({'min-height': $td.height()});
								
								var $tr = $('<tr/>').append($td);
								$coltbl.find('>tbody').append($tr);
							});
							
							$coltbl.data('loaded', true);								
						}
						
						$coltbl.css({left: sl - pos.left, top: 0}).show();
						$coltbl.find('>thead').css({top: st - pos.top - 1, 'min-width': $coltbl.find('>tbody').width()});
						
						if (st - pos.top > 0)
						{
							$coltbl.find('>thead').css({ position: 'absolute'});
						}
						else
						{
							$coltbl.find('>thead').css({position: 'relative'});
						}
						
						$coltbl.css({ 'min-width': $coltbl.find('>tbody').width() });
					}
					else
					{
						if ($coltbl != undefined)
						{
							$coltbl.find('>thead >tr >:nth-child(1)').each(function(i, td)
							{
								$thead.find('>tr:eq(' + i + ')').prepend(td);
							});
							
							$coltbl.find('>tbody >tr >:nth-child(1)').each(function(i, td)
							{
								$tbody.find('>tr:eq(' + i + ')').prepend(td);
							});
							
							$coltbl.empty().hide();
							$coltbl.data('loaded', false);
						}											
					}									
							
					clearTimeout(timeout);
					timeout = setTimeout(function()
					{
						scrolling = false;
					}, 50);
				});
			}
			
			load_data();
			add_listeners();
		</script>
	</body>
</html>