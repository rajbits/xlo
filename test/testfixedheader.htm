<!DOCTYPE html>
<html>
	<head>
		<title>Fixed header test</title>
		<link rel="stylesheet" href="../src/assets/lib/bootstrap/css/bootstrap.min.css" />
		<style>
			th
			{
				background-color: #f0f0f0;
			}
		</style>
	</head>
	<body>
		<p>&nbsp;</p>
		<p>&nbsp;</p>
		<p>&nbsp;</p>
		<div id='main'>
			<table class='table table-striped table-bordered' cellspacing='0' cellpadding='3'></table>
		</div>
		
		<script src='../src/assets/lib/jquery/jquery-2.0.3.min.js'></script>
		<script src='../src/assets/js/duplex.deps-0.6.js'></script>
		<script src='../src/assets/js/duplex-0.61.js'></script>
		<script>
			var $main = $('#main'), $tbl = $main.find('>table').css({position: 'relative'}), rows = 100, cols = 10;
			function load_data()
			{
				var $thead = $('<thead/>').appendTo($tbl);
				load_header($thead);
				
				var $tbody = $('<tbody/>').appendTo($tbl);
				for(var i = 0; i < rows; i++)
				{
					var $tr = $('<tr/>').appendTo($tbody);
					for(var j = 0; j < cols; j++)
					{
						var $td = $('<td/>').appendTo($tr).html(j + Math.random());
					}	
				}				
			}
			
			function load_header($thead)
			{				
				var $tr = $('<tr/>').appendTo($thead);
				for(var i = 0; i < cols; i++)
				{			
					var $th = $('<th/>').appendTo($tr).html(i + Math.random());		
				}
			}
			
			function backup_widths($thead)
			{
				$thead.find('>tr>th').each(function(i, th)
				{
					var $th = $(th);
					$th.data('width', $th.get(0).style.width);
				});
			}
			
			function restore_widths($thead)
			{
				$thead.find('>tr>th').each(function(i, th)
				{
					var $th = $(th), w = $th.data('width');
					if (w == undefined) w = "";
					
					$th.css({ width: w , 'min-width': "" });
				});
			}
			
			function add_listeners()
			{
				var pos = $tbl.position(), scrolling = false, $thead = $tbl.find('>thead'), $tbody = $tbl.find('>tbody'), timeout;
				$(window).on('scroll', function(e)
				{
					if (!scrolling)
					{
						backup_widths($thead);
						scrolling = true;	
					}
					
					var $win = $(this), st = $win.scrollTop();
					if (st - pos.top > 0)
					{
						$thead.find('>tr>th').each(function(i, th)
						{
							var w = $tbody.find('>tr:eq(0) >td:nth-child(' + (i+1) + ')').outerWidth();
							$(th).css({'min-width': w, width: w});	
						});
						$thead.css({position: 'absolute', top: st - pos.top, left: 0});
					}
					else
					{
						$thead.css({position: 'inherit', top: "", width: ""});
						restore_widths($thead);
					}
										
					clearTimeout(timeout);
					timeout = setTimeout(function()
					{
						scrolling = false;
					}, 50);
				});
			}
			
			/*function add_listeners()
			{
				var pos = $tbl.position(), scrolling = false, $thead = $tbl.find('>thead'), $tbody = $tbl.find('>tbody'), timeout;
				$(window).on('scroll', function(e)
				{
					if (!scrolling)
					{
						backup_widths($thead);
						scrolling = true;	
					}
					
					var $win = $(this), st = $win.scrollTop();
					if (st - pos.top > 0)
					{
						$thead.find('>tr>th').each(function(i, th)
						{
							var w = $tbody.find('>tr:eq(0) >td:nth-child(' + (i+1) + ')').outerWidth();
							$(th).css({'min-width': w, width: w});	
						});
						$thead.css({position: 'absolute', top: st - pos.top, left: 0});
					}
					else
					{
						$thead.css({position: 'inherit', top: "", width: ""});
						restore_widths($thead);
					}
										
					clearTimeout(timeout);
					timeout = setTimeout(function()
					{
						scrolling = false;
					}, 50);
				});
			}*/
			
			load_data();
			add_listeners();
		</script>
	</body>
</html>