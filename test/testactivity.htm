<!DOCTYPE html>
<html>
	<head>
		<title>Activities test</title>
		<link rel="stylesheet" href="../src/assets/lib/bootstrap/css/bootstrap.min.css" />
		<style>			
			*, button
			{
				outline: none;
			}
			
			.act-row
			{
				padding: 4px;
				border-bottom: 1px lightgrey solid;
			}		
			
			.act-row .act-play-btn
			{
				position: relative;
				top: -4px;
			}	
			
			.act-row .glyphicon
			{
				font-size: 90%;				
			}
			
			.grippy
			{
				cursor: -webkit-grab;
			}	
			
			.container
			{
				padding: 10px;
			}
			
			.act-name
			{
				font-size: 90%;
			}
			
			.act-status
			{
				font-size: 80%;
				color: gray;
			}
			
			.grippy
			{
				color: gray;
			}
			
			[contenteditable=true]:empty:before 
			{
				content: attr(placeholder);
				color: lightgrey;
			}
			
			#dd
			{
				position: absolute;
				display: none;
			}
						
			.unselectable
			{
			   -moz-user-select: -moz-none;
			   -khtml-user-select: none;
			   -webkit-user-select: none;
			   -ms-user-select: none;
			   user-select: none;
			}
			
			.no-pad
			{
				padding-right: 0px;
				padding-left: 0px;	
			}	
			
			.pull-up
			{
				margin-top: -19px;
			}
			
			.act-total
			{
				font-size: 80%;
			}
			
			.act-moving
			{
				opacity: 0.3;
			}	
			
			.act-moved
			{
				opacity: 1;
			}
			
			.act-target
			{
				border: 1px lightblue solid;
			}		
		</style>
	</head>
	<body>
		<div class='container-fluid'>
			<h4>Activities</h4>
			<ol id='container' class='unselectable'>			
			</ol>
			<div>			
				<ul id='dd' class='dropdown-menu'>				
				</ul>
			</div>
		</div>		
		
		<script src='../src/assets/lib/jquery/jquery-2.0.3.min.js'></script>
		<script src="../src/assets/lib/watch/watch.js"></script>
		<script src='../src/assets/js/duplex-0.8.js'></script>
		<script src="../src/assets/lib/pouchdb/pouchdb-1.1.0.min.js"></script>
		<script src="timer.js"></script>
		<script src="jquery.select.js"></script>
		<script src="jquery.sort.js"></script>
		
		<script id='activities' type='text/html'>
			<li dp-attr='id: "a"; a._id | prefix' class='act-row' dp-repeat='a in list' dp-post-create='post_create'>
				<div class='pull-up row'>
					<div class='col-md-6 col-sm-6 col-xs-8 no-pad'>
						<div class='act-nm-st''>
							<div class='col-md-3 col-sm-3 col-xs-3 row' style='padding-right: 0px; padding-left: 25px;'>
								<span class='glyphicon glyphicon-th grippy' dp-plugin='sort'></span>
								<input class='act-select' type='checkbox' dp-plugin='select'/>
								<span class='glyphicon act-collapse' style='display: inline-block;'></span>
							</div>
							<div class='col-md-9 col-sm-9 col-xs-9'>
								<div class='act-name' dp-bind='a.name' dp-data='o: a' contenteditable='true' placeholder='Activity name' dp-ui-event='keydown: type, focus: reset, blur: saveToDB' dp-plugin='autoComplete'></div>
								<div class='act-status col-xs-offset-3' dp-bind='a.status' contenteditable='true' placeholder='Status/Notes'></div>
							</div>
						</div>
					</div>
					<div class='col-md-1 col-sm-1 col-xs-1'>
						<div class='btn btn-sm act-play-btn' dp-ui-event='click: timer' dp-data='o: a' dp-plugin='playToggle'>
							<span class='glyphicon glyphicon-play'></span>
						</div>
						<div class='act-total' dp-bind='a.total | formatTotal'></div>
					</div>
					<div class='col-md-1 col-sm-1 hidden-xs' dp-bind='a.priority' contenteditable='true' placeholder='Priority'></div>
					<div class='col-md-1 col-sm-1 hidden-xs' dp-bind='a.seconds' contenteditable='true' placeholder='Estimate'></div>
				</div>
			</li>
		</script>
		<script>
			$.fn.playToggle = function()
			{
				return this.each(function()
				{
					var $me = $(this), play = 'glyphicon-play', pause = 'glyphicon-pause', $s = $me.find('>span');
					$me.click(function(e)
					{
						if ($s.hasClass(play))
							$s.removeClass(play).addClass(pause);
						else
							$s.removeClass(pause).addClass(play);
					});
				});				
			};
			
			$.cursorPosition = function()
			{				
				function getSelectionCoords()
				{
				    var sel = document.selection, range;
				    var x = 0, y = 0;
				    if (sel)
				    {
				        if (sel.type != "Control") 
				        {
				            range = sel.createRange();
				            range.collapse(true);
				            x = range.boundingLeft;
				            y = range.boundingTop;
				        }
				    } 
				    else if (window.getSelection)
				    {
				        sel = window.getSelection();
				        if (sel.rangeCount)
				        {
				            range = sel.getRangeAt(0).cloneRange();
				            if (range.getClientRects)
				            {
				                range.collapse(true);
				                var rect = range.getClientRects()[0];
				                x = rect.left;
				                y = rect.top;
				            }
				        }
				    }
				    return { x: x, y: y };
				}	
				
				return getSelectionCoords();							
			};
		</script>
		<script>
			var list = 
			[/*{
				name: 'First activity',
				priority: 1,
				seconds: 500,
				status: 'Work in progress, but waiting on response from seller'
			},
			{
				name: 'Second activity',
				seconds: 500,
				total: 400
			},
			{
				name: 'Third activity',
				priority: 1,
				seconds: 500
			}*/];
			
			var db;
			function pre_load()
			{
				db.info(function(err, response)
				{					
					if (response.doc_count == 0)
					{
						db.bulkDocs({docs: list}, {}, function(err, response)
						{
							list.length = 0;							
							fetchActivities();
						});	
					}
					else
						fetchActivities();															
				});
			}
			
			function load_db()
			{
				db = new PouchDB('xlo');
				pre_load();
			}
			
			load_db();
		</script>
		<script>
			function fetchActivities()
			{				
				query_levels(1);
			}
			
			function query_levels(level)
			{
				db.query(function(doc)
				{
					if (doc.level == null || doc.level == level)
						emit(doc._id, null);
				},
				{include_docs: true},
				function(err, response)
				{
					if (err)
						throw err;
					
					$.each(response.rows, function(i, r)
					{
						if (r.doc.level == null) r.doc.level = 1;
						if (r.doc.parent_id == null) r.doc.parent_id = 0;
						
						list.push(r.doc);
					});
					
					loadActivities();
				});
			}			
			
			$.fn.autoComplete  = function()
			{
				return this.each(function()
				{
					var l, $me = $(this), id = 'act-name-dd', $dd = $('#' + id), $ul = $dd.find('>ul');			
					if (l == undefined) l = list;
					
					$me.on('keyup', function(e)
					{
						var t = $me.text();
						if ($dd.length == 0)
						{
							$ul = $('<ul/>')
									.css({listStyle: 'none', paddingLeft: '0px'});
							$dd = $('<div/>')
									.attr({id: id})
									.css({ 'max-height': '100px', overflow: 'auto', position: 'absolute', border: '1px #d3d3d3 solid', backgroundColor: '#fff' })
									.append($ul)
									.appendTo(document.body);
						}
							
						var kc = e.keyCode;
						if ((kc >= 46 && kc <= 111) || kc >= 186 || kc == 8)
						{
							var results = $.grep(l, function(item)
							{
								if (item == undefined || item.name == undefined) return false;
								return item.name.search(RegExp(t, 'i')) != -1;
							});
										
							$ul.empty();
							$.each(results, function(i, term)
							{
								var $li = $('<li/>')
									.css({cursor: 'pointer', paddingLeft: '5px'})
									.html(term.name)
									.appendTo($ul)
									.on('mouseover', function(e)
									{
										var $target = $(e.target);
										if ($target.data('selected')) return;
										
										$target.css({'background-color': 'lightgrey'});
									})
									.on('mouseout', function(e)
									{
										var $target = $(e.target);
										if ($target.data('selected')) return;
										
										$target.css({'background-color': 'inherit'});
									})
									.on('click tap', function(e)
									{
										var $dds = $(e.target).parents('ul:eq(0)').parent();
										var $src = $dds.data('src');
										if ($src == undefined || $src.length == 0) return;
				
										$src.html($.trim($(e.target).html()));
										$ul.empty();
										
										$dds.hide().removeData('src').removeData('selected');
									});
							});
							
							var pos = $me.offset(), curpos = $.cursorPosition();
							$dd.show().css({left: pos.left, top: curpos.y + $(document.body).scrollTop() + 20, width: $me.outerWidth()});
							$dd.data('src', $me);	
						}						
					});
					
					$me.on('keydown', function(e)
					{
						var $sel = $dd.data('selected');
						function select(upDown)
						{
							if ($sel == undefined || $sel.length == 0)
								$sel = $ul.find('li:eq(0)').css({ backgroundColor: 'gray' });
							else	
							{
								$sel.css({ backgroundColor: 'inherit' });
								
								var $nsel = (upDown == 'down') ? $sel.next() : $sel.prev();
								if ($nsel.length == 0) $nsel = $ul.find('li:eq(0)');
								  
								$sel =  $nsel.css({ backgroundColor: 'gray' });								
							}
							
							if ($sel.length > 0)
							{
								$sel.get(0).scrollIntoViewIfNeeded();
								$dd.data('selected', $sel);	
							}
							else
							{
								$dd.removeData('selected');
							}
						}
						
						switch(e.keyCode)
						{
							case 40:							
									select('down');							
									break;
									
							case 38:
									select('up');
									break;					
						}
						
						if (e.keyCode == 13 && $dd.is(':visible') && $ul.children().length > 0)
						{
							e.preventDefault(); e.stopImmediatePropagation();
							var $selected = $dd.data('selected'); 
							if ($selected != undefined)
								$selected.trigger('click');
							else
								$dd.hide();
							
							return false;
						}
					});
					
					$me.blur(function(e)
					{
						$dd.hide();	
					});
				});
			};
						
			function loadActivities()
			{
				var o =
				{
					template: $('#activities').html(),
					model:
					{
						list: list,
						formatTotal: function(v)
						{
							if (v == undefined) v = 0;
							var timer = new Timer(v);				
							return timer.format();
						},

						prefix: function(txt, val)
						{
							return txt + val;
						},
						
						timer: function(e)
						{
							var $me = $(this), a = $me.data('o');
							if (a == null)
								return;
							
							var timer = $me.data('timer');
							var callbacks = 
							{
								tick: function(total_time)
								{
									a.total = total_time;
								}
							};
							
							if (timer == null)
							{
								timer = new Timer(a.total, callbacks);
								$me.data('timer', timer);
							}
							
							timer.toggle();			
						},
						
						post_create: function($t)
						{
							
						},
						
						type: function(e)
						{
							var $me = $(e.target), a = $me.data('o');
							if (e.keyCode == 9) //TAB
							{
								
								return true;
							}
							
							return true;				
						},
						
						reset: function(e)
						{
							var $t = $(e.target);
							$t.data('backup', $t.value());
						},
						
						saveToDB: function(e)
						{
							var $t = $(e.target);
							if ($t.data('backup') != $t.value())
								console.log('Going to save to DB');
						}
					},
					default_parent: $('#container')
				};
				
				var $el = duplex.bind(o);
				$('#container').append($el);
				
				for(var i = 0; i < 100; i++) list.push({name: 'abcd' + i});
			}									
		</script>
	</body>
</html>